{"type": "Incomplete", "prompt": "Problem: Last winter, an avalanche swept away all the ski lifts from the ski resort Valen. Instead of rebuilding the lifts like they were before, the plan is to do it in a more optimized way, and you are responsible for this. \n\nThe only thing remaining from the old lift system are $n$ pylons situated at integer coordinates in the plane. You would like to put lifts in the form of line segments between some of these pylons. The line segments must satisfy the following constraints:\n - A line segment can only go between pylons $(x_1, y_1)$ and $(x_2, y_2)$ if $|y_1-y_2| = 1$.\n - There are two types of pylons, one-way and two-way pylons. The one-way pylons can be connected to at most one other pylon, and the two-way pylons can be connected to at most two other pylons. \n\nWhat is the maximum number of ski lifts (line segments) you can place under these constraints?\n\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 10^5$). Each of the following $n$ lines contains three integers $x$, $y$, and $a$, the coordinates and type of a pylon ($0 \\leq x,y \\leq 10^5$; $a=1$ for a one-way pylon and $a=2$ for a two-way pylon). All the pylons are situated at different coordinates.\n\n-----Output-----\nOutput the maximum number of ski lift line segments that can be placed.\n\n-----Examples-----\nSample Input:\n8\n1 0 1\n3 0 2\n0 1 1\n2 1 2\n4 1 2\n1 2 2\n2 3 1\n4 3 1\nSample Output:\n4\n\nSolution:", "chosen": "1. What is the maximum number of pylons that can be connected to a single two-way pylon?\n2. Are there any additional constraints on the placement of line segments beyond those specified in the problem description?\n3. Are there any restrictions on the orientation of line segments relative to the x-axis or y-axis?", "rejected": "```python\n# Incorrect code with logical and syntactical errors\n\nimport math\n\n# Initialize variables\nnum_pylons = int(input())\nline_segments = []\n\n# Read line segments\nfor i in range(num_pylons - 1):\n    line_segments.append(list(map(int, input().split())))\n\n# Find the maximum number of pylons connected to a single two-way pylon\nmax_connections = 0\nfor pylon in range(num_pylons):\n    if line_segments[pylon][0] != line_segments[pylon][1]:  #  Logical error: should be line_segments[pylon][1] == -1\n        connections = 0\n        for segment in line_segments:\n            if segment[0] == pylon or segment[1] == pylon:  # Logical error: should be segment[1] == -1\n                connections += 1\n        if connections > max_connections:\n            max_connections = connections\n\n# Check if there are any additional constraints on the placement of line segments\n# Syntactical error: missing colon after if statement\nif num_pylons > 100:\n    print(\"Error: Number of pylons exceeds limit\")\n\n# Check if there are any restrictions on the orientation of line segments\n# Logical error: should be checking for vertical or horizontal segments\nif line_segments[0][0] % 2 != line_segments[0][1] % 2:\n    print(\"Error: Line segments must be either vertical or horizontal\")\n\n# Print the maximum number of pylons connected to a single two-way pylon\nprint(max_connections)\n```"}
{"type": "Original", "prompt": "Problem: Pashmak decided to give Parmida a pair of flowers from the garden. There are n flowers in the garden and the i-th of them has a beauty number b_{i}. Parmida is a very strange girl so she doesn't want to have the two most beautiful flowers necessarily. She wants to have those pairs of flowers that their beauty difference is maximal possible!\n\nYour task is to write a program which calculates two things:  The maximum beauty difference of flowers that Pashmak can give to Parmida.  The number of ways that Pashmak can pick the flowers. Two ways are considered different if and only if there is at least one flower that is chosen in the first way and not chosen in the second way. \n\n\n-----Input-----\n\nThe first line of the input contains n (2 \u2264 n \u2264 2\u00b710^5). In the next line there are n space-separated integers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 10^9).\n\n\n-----Output-----\n\nThe only line of output should contain two integers. The maximum beauty difference and the number of ways this may happen, respectively.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n1 1\nInput\n3\n1 4 5\n\nOutput\n4 1\nInput\n5\n3 1 2 3 1\n\nOutput\n2 4\n\n\n-----Note-----\n\nIn the third sample the maximum beauty difference is 2 and there are 4 ways to do this:  choosing the first and the second flowers;  choosing the first and the fifth flowers;  choosing the fourth and the second flowers;  choosing the fourth and the fifth flowers.\n\nSolution:", "chosen": "\"\"\"\nCodeforces Contest 261 Div 2 Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef main():\n    n, = read()\n    a = read()\n    mn = 10**9+1\n    mncount = 0\n    mx = 0\n    mxcount = 0\n    for i in range(n):\n        if a[i] < mn:\n            mn = a[i]\n            mncount = 1\n        elif a[i] == mn:\n            mncount += 1\n        if a[i] > mx:\n            mx = a[i]\n            mxcount = 1\n        elif a[i] == mx:\n            mxcount += 1\n    if mx != mn:\n        print(mx-mn, mncount*mxcount)\n    else:\n        print(0, n*(n-1)//2)\n\n################################### NON-SOLUTION STUFF BELOW\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "rejected": "**Vague:**\n\n* What is the purpose of the code?\n* What are the inputs and outputs of the code?\n\n**Irrelevant:**\n\n* What is the author's name?\n* What is the language used to write the code?\n\n**Misleading:**\n\n* Does the code solve a problem on Codeforces?\n* Does the code implement a specific algorithm?\n\n**Do not help resolve ambiguities:**\n\n* What is the variable `mn` used for?\n* How is the `mncount` variable updated?\n* What is the significance of the `if mx != mn` condition?"}
{"type": "Original", "prompt": "Problem: In this kata, the number 0 is infected. You are given a list. Every turn, any item in the list that is adjacent to a 0 becomes infected and transforms into a 0. How many turns will it take for the whole list to become infected?\n\n```\n[0,1,1,0] ==> [0,0,0,0] \nAll infected in 1 turn.\n\n[1,1,0,1,1] --> [1,0,0,0,1] --> [0,0,0,0,0]\nAll infected in 2 turns\n\n[0,1,1,1] --> [0,0,1,1] --> [0,0,0,1] --> [0,0,0,0]\nAll infected in 3 turns.\n```\n\nAll lists will contain at least one item, and at least one zero, and the only items will be 0s and 1s. Lists may be very very long, so pure brute force approach will not work.\n\nSolution:", "chosen": "def infected_zeroes(s):\n    m=0; l=0\n    for i,n in enumerate(s):\n        if n==0: m=i if l==0 else max(m, (i-l+1)//2); l=i+1\n    return max(m,len(s)-l)", "rejected": "* **Question 1:** What does the function *infected_zeroes* do?\n* **Question 2:** Is the input parameter *s* a list or a string?\n* **Question 3:** What is the meaning of variable *m* and variable *l*?\n* **Question 4:** Is the result of the function an integer or a fraction?\n* **Question 5:** How does the function handle negative values in the input parameter *s*?"}
{"type": "Inconsistent", "prompt": "Problem: Two friends are on the coordinate axis Ox in points with integer coordinates. One of them is in the point x_1 = a, another one is in the point x_2 = b. \n\nEach of the friends can move by one along the line in any direction unlimited number of times. When a friend moves, the tiredness of a friend changes according to the following rules: the first move increases the tiredness by 1, the second move increases the tiredness by 2, the third\u00a0\u2014 by 3 and so on. For example, if a friend moves first to the left, then to the right (returning to the same point), and then again to the left his tiredness becomes equal to 1 + 2 + 3 = 6.\n\nThe friends want to meet in a integer point. Determine the minimum total tiredness they should gain, if they meet in the same point.\n\n\n-----Input-----\n\nThe first line contains a single integer a (1 \u2264 a \u2264 1000) \u2014 the initial position of the first friend. \n\nThe second line contains a single integer b (1 \u2264 b \u2264 1000) \u2014 the initial position of the second friend.\n\nIt is guaranteed that a = b.\n\n\n-----Output-----\n\nPrint the minimum possible total tiredness if the friends meet in the same point.\n\n\n-----Examples-----\nInput\n3\n3\n\nOutput\n1\n\nInput\n101\n101\n\nOutput\n2\n\nInput\n5\n5\n\nOutput\n9\n\nSolution:", "chosen": "1. The problem description states that \"It is guaranteed that a \u2260 b\", but the examples provided show that a = b. Which condition is correct?\n2. The problem description states that \"The friends want to meet in a integer point\", but the examples provided show that the friends meet in the same point. Are these two statements contradictory?", "rejected": "```python\nimport sys\ninput = sys.stdin.readline\n\n# Incorrect version of the code\na, b = map(int, input().split())\nif a == b:  # Logical error: Should be a != b\n    print(\"YES\")\n    print(a)\n    exit()\n\n# Syntactical error: Missing colon after the for loop\nfor i in range(1, (a + b) // 2 + 1):\n    if a % i == 0 and b % i == 0:\n        print(\"NO\")\n        print(i)\n        exit()\n\nprint(\"YES\")\nprint(a + b)\n```"}
{"type": "Ambiguous", "prompt": "Problem: A group of entrepreneurs is starting a new company and wants to name it something unique. They've come up with a clever idea: the name should be the same when read forwards or backwards.\n\nThey have a list of potential names, but they don't want to manually check each one. They've asked you to write a program that can determine whether a given word is a \"palindrome\" or not.\n\n-----Input-----\n\nThe first line contains a non-empty word that needs to be checked. The word contains at most 10^5 characters. The word may contain any combination of uppercase and lowercase English letters, numbers, and special characters.\n\n-----Output-----\n\nPrint 'YES' (without the quotes), if the given word is a palindrome. Otherwise, print 'NO' (without the quotes).\n\n-----Examples-----\nInput\nracecar\n\nOutput\nYES\n\nInput\n12321\n\nOutput\nYES\n\nInput\nabcde\n\nOutput\nNO\n\nSolution:", "chosen": "1. What is the definition of a \"palindrome\" in this context? Does it refer to a word that reads the same forwards and backwards, or something else?\n2. Are there any specific restrictions on the characters that can be used in the word? For example, are spaces, punctuation, or non-English characters allowed?\n3. Is the case of the letters in the word significant? For instance, would \"Racecar\" and \"racecar\" be considered the same palindrome?", "rejected": "```python\ndef is_palindrome(word):\n  # Incorrectly defining palindrome as a word that reads the same backwards and forwards only when the letters are in uppercase.\n  return word == word[::-1].upper()\n\ndef main():\n  words = [\"Racecar\", \"racecar\", \"Palindrome\", \"12321\"]\n\n  for word in words:\n    if is_palindrome(word):\n      print(f\"{word} is a palindrome.\")\n    else:\n      print(f\"{word} is not a palindrome.\")\n\nif __name__ == \"__main__\":\n  main()\n```"}
